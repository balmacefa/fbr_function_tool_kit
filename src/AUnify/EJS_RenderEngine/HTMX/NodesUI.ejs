<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <title><%- locals.utils.website_title() %></title>

  <!-- <link href="/styles.css" rel="stylesheet"> -->
  <script src="https://cdn.tailwindcss.com"></script>


  <!-- HTMX CDN -->
  <script src="https://unpkg.com/htmx.org"></script>

  <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

  <script src="https://cdn.jsdelivr.net/npm/jquery-ui@1.13.2/dist/jquery-ui.min.js" integrity="sha256-lSjKY0/srUM9BE3dPm+c4fBo1dky2v27Gdjm2uoZaL0=" crossorigin="anonymous"></script>

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/jquery-ui@1.13.2/themes/base/selectmenu.min.css">

  <!-- Showdown CDN , ths s a mardown render library, I using combined with jquery -->
  <script src="https://cdn.jsdelivr.net/npm/showdown@1.9.1/dist/showdown.min.js"></script>
  <!-- FontAwesome CDN -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />

  <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/font-awesome-line-awesome/css/all.min.css" />

  <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css" />

  <!-- Fonts google -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <!-- class="font-['Montserrat']" -->
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;700&display=swap" rel="stylesheet" />
  <!-- class="font-['Montserrat']" -->
  <script src="https://unpkg.com/gojs@2.3.13/release/go.js"></script>

</head>

<body class="h-full min-h-screen">

  <div id="allSampleContent" class="p-4 w-full">
    <script src="https://unpkg.com/gojs@2.3.13/extensions/Figures.js"></script>
    <script id="code">
      var red = "orangered"; // 0 or false
      var green = "forestgreen"; // 1 or true

      function init() {

        // Since 2.2 you can also author concise templates with method chaining instead of GraphObject.make
        // For details, see https://gojs.net/latest/intro/buildingObjects.html
        const $ = go.GraphObject.make;

        myDiagram =
          new go.Diagram("myDiagramDiv", {
            initialContentAlignment: go.Spot.Center, // for v1.*
            initialScale: 1.4,
            "undoManager.isEnabled": true,
            "linkingTool.direction": go.LinkingTool.ForwardsOnly,
            "ModelChanged": e => { // just for demonstration purposes,
              if (e.isTransactionFinished) { // show the model data in the page's TextArea
                document.getElementById("mySavedModel").textContent = e.model.toJson();
              }
            }
          });

        myDiagram.nodeTemplate =
          $(go.Node, "Table",
            new go.Binding("location", "location", go.Point.parse).makeTwoWay(go.Point.stringify), {
              selectionObjectName: "BODY",
              linkValidation: (fromnode, fromport, tonode, toport, link) => {
                if (!fromport || !toport) return false;
                if (fromnode === tonode) {
                  return false; // Prevent Inner port connections
                  // inside a node must go from an input port to an output port
                  // return fromport.portId[0] === "i" && toport.portId[0] === "o";
                } else {
                  // between nodes the port colors must match
                  if (fromport.fill !== toport.fill) return false;
                  // between nodes must go from an output port to an input port
                  return fromport.portId[0] === "o" && toport.portId[0] === "i";
                }
                return true;
              }
            },

            $(go.RowColumnDefinition, {
              column: 1,
              width: 120
            }),
            $(go.Shape, {
              name: "BODY",
              row: 0,
              rowSpan: 99,
              column: 0,
              columnSpan: 3,
              stretch: go.GraphObject.Fill,
              fill: "#d1d5db",
              strokeWidth: 0,
              margin: new go.Margin(0, 8)
            }, ),
            $(go.TextBlock, {
                row: 0,
                columnSpan: 3,
                margin: new go.Margin(4, 2, 2, 2)
              },
              new go.Binding("text")),
            $(go.TextBlock, {
                row: 2,
                columnSpan: 3,
                margin: new go.Margin(4, 2, 2, 2)
              },
              new go.Binding("text", "text2")),

            $(go.Panel, "Table",
              new go.Binding("itemArray", "inPorts"), {
                row: 1,
                column: 0,
                defaultSeparatorPadding: new go.Margin(4, 0),
                itemTemplate: // input ports
                  $(go.Panel, "TableRow", {
                      // Lefts panel ports
                      background: "#d1d5db"
                    },
                    $(go.Panel, "Horizontal", {},
                      $(go.Shape, {
                          width: 8,
                          height: 8,
                          strokeWidth: 0,
                          margin: new go.Margin(6, 6, 6, 6),
                          fromSpot: go.Spot.Right,
                          toSpot: go.Spot.Left,
                          fromLinkable: true,
                          toLinkable: true,
                          fromLinkableSelfNode: false,
                          toLinkableSelfNode: false,
                          cursor: "pointer"
                        },
                        new go.Binding("portId", "row", r => "i" + r).ofObject(),
                        new go.Binding("fill", "", convertToColor)),

                      // Data Input Port and its label

                      $(go.TextBlock, '. ' + "Data In") // Label for Data Input
                    ),


                  )
              }
            ),
            $(go.Panel, "Table",
              new go.Binding("itemArray", "outPorts"), {
                row: 1,
                column: 2,
                defaultSeparatorPadding: new go.Margin(4, 0),
                itemTemplate: // output ports
                  $(go.Panel, "TableRow", {
                      background: "#d1d5db"
                    },
                    $(go.Panel, "Horizontal", {},
                      $(go.TextBlock, "Data Out"), // Label for Data Output
                      $(go.Shape, {
                          width: 8, // Adjusted size
                          height: 8, // Adjusted size
                          strokeWidth: 0,
                          margin: new go.Margin(6, 6, 6, 6),
                          fromSpot: go.Spot.Right,
                          toSpot: go.Spot.Left,
                          fromLinkable: true,
                          toLinkable: true,
                          fromLinkableSelfNode: false,
                          toLinkableSelfNode: false,
                          cursor: "pointer"
                        },
                        new go.Binding("portId", "row", r => "o" + r).ofObject(),
                        new go.Binding("fill", "", convertToColor)),

                      // Data Output Port and its label
                    )
                  )
              }
            ),

          );

        function convertToColor(n) {
          switch (n) {
            case "r":
              return "brown";
            case "g":
              return "olivedrab";
            case "b":
              return "cornflowerblue";
            default:
              return "black";
          }
        }

        myDiagram.linkTemplate =
          $(go.Link, {
              relinkableFrom: true,
              relinkableTo: true
            },
            $(go.Shape, {
                strokeWidth: 2
              },
              new go.Binding("stroke", "fromPort", p => p.fill).ofObject())
          );

        myDiagram.model = new go.GraphLinksModel({
          linkFromPortIdProperty: "fpid",
          linkToPortIdProperty: "tpid",
          copiesArrays: true,
          copiesArrayObjects: true,
          nodeDataArray: [{
              "key": 1,
              "text": "Alpha",
              "text2": "Alpha 2",
              "location": "-64.64285714285717 -11.07142857142857",
              "inPorts": ["r", "r", "r", "g", "b"],
              "outPorts": ["r", "g", "g", "b", "b"]
            },
            {
              "key": 3,
              "text": "Gamma",
              "location": "145.35714285714286 -43.21428571428572",
              "inPorts": ["r", "r", "g", "g", "b"],
              "outPorts": ["r", "r", "g", "g", "b"]
            }
          ],
          linkDataArray: [{
              "from": 1,
              "fpid": "o2",
              "to": 3,
              "tpid": "i2"
            },
            {
              "from": 1,
              "fpid": "o3",
              "to": 3,
              "tpid": "i4"
            }
          ]
        });
      }

      // save a model to and load a model from JSON text, displayed below the Diagram
      function save() {
        document.getElementById("mySavedModel").value = myDiagram.model.toJson();
        myDiagram.isModified = false;
      }

      function load() {
        myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
      }
      window.addEventListener('DOMContentLoaded', init);
    </script>

    <div id="sample">
      <div style="width: 100%; display: flex; justify-content: space-between">
        <div id="palette" style="width: 100px; height: 500px; margin-right: 2px; background-color: whitesmoke; border: 1px solid black; position: relative; -webkit-tap-highlight-color: rgba(255, 255, 255, 0);">
          <canvas tabindex="0" width="196" height="996" style="position: absolute; top: 0px; left: 0px; z-index: 2; user-select: none; touch-action: none; width: 98px; height: 498px;"></canvas>
          <div style="position: absolute; overflow: auto; width: 98px; height: 498px; z-index: 1;">
            <div style="position: absolute; width: 1px; height: 1px;"></div>
          </div>
        </div>
        <div id="myDiagramDiv" style="flex-grow: 1; background-color: #64748b; height: 500px; border: 1px solid black; position: relative; -webkit-tap-highlight-color: rgba(255, 255, 255, 0); cursor: auto;">
          <canvas tabindex="0" width="1904" height="1200" style="position: absolute; top: 0px; left: 0px; z-index: 2; user-select: none; touch-action: none; width: 952px; height: 498px; cursor: auto;"></canvas>

          <div style="position: absolute; overflow: auto; width: 952px; height: 498px; z-index: 1;">
            <div style="position: absolute; width: 1px; height: 1px;"></div>
          </div>
        </div>
      </div>

      <div>
        <div>
          <button id="saveModel" onclick="save()">Save</button>
          <button onclick="load()">Load</button>
          Diagram Model saved in JSON format:
        </div>
        <textarea id="mySavedModel" style="width:100%;height:200px">
    </textarea>
      </div>
    </div>
  </div>




</body>

</html>